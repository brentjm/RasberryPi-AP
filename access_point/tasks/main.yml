---

- name: Update and upgrade system
  ansible.builtin.apt:
          update_cache: yes
          upgrade: dist

- name: Install necessary packages
  ansible.builtin.apt:
          name: "{{ packages }}"
          state: present

- name: Stop dnsmasq service
  ansible.builtin.service:
          name: dnsmasq
          state: stopped

- name: Stop hostapd service
  ansible.builtin.service:
          name: hostapd
          state: stopped

- name: Copy dhcpcd.conf
  ansible.builtin.template:
          src: dhcpcd.conf.j2
          dest: /etc/dhcpcd.conf

- name: Copy network interfaces
  ansible.builtin.template:
          src: interfaces.j2
          dest: /etc/network/interfaces

- name: Copy hostapd.conf 
  ansible.builtin.template:
          src: hostapd.conf.j2
          dest: /etc/hostapd/hostapd.conf

- name: Add location of hostapd startup script
  ansible.builtin.lineinfile:
          path: /etc/default/hostapd
          regex: 'DAEMON_CONF='
          line: DAEMON_CONF="/etc/hostapd/hostapd.conf"

- name: Copy dnsmasq.conf 
  ansible.builtin.template:
          src: dnsmasq.conf.j2
          dest: /etc/dnsmasq.conf
          backup: true

- name: Enable and start hostapd service
  ansible.builtin.systemd:
          name: hostapd
          masked: no
          enabled: yes
          state: restarted
 
#- name: Add bridge interface
#  ansible.builtin.shell: /sbin/brctl addbr {{ bridge.interface }}
#
#- name: Add ethernet interface to bridge
#  ansible.builtin.shell: /sbin/brctl addif {{ bridge.interface }} {{ ethernet.interface }}
#
#- name: Copy bridge-br0.netdev
#  ansible.builtin.template:
#          src: bridge-br0.netdev.j2
#          dest: /etc/systemd/network/bridge-br0.netdev
#
#- name: Copy bridge-br0.network
#  ansible.builtin.template:
#          src: bridge-br0.network.j2
#          dest: /etc/systemd/network/bridge-br0.network
#
#- name: Copy bridge-br0-slave.network
#  ansible.builtin.template:
#          src: bridge-br0-slave.network.j2
#          dest: /etc/systemd/network/bridge-br0-slave.network

#- name: Include secret file
#  ansible.builtin.include_vars:
#          file: secret.yml
#          name: secret

#- name: Enable IP forwarding
#  ansible.builtin.sysctl:
#          name: net.ipv4.ip_forward
#          value: '1'
#          sysctl_set: yes
#          state: present
#          reload: yes  
#
#- name: Add iptables rule for POSTROUTING
#  ansible.builtin.iptables:
#          table: nat
#          chain: POSTROUTING
#          out_interface: "{{ ethernet.interface }}"
#          jump: MASQUERADE
#
#- name: Add iptables rule to forward traffic from ethernet to wireless interface
#  ansible.builtin.iptables:
#          chain: FORWARD
#          in_interface: "{{ ethernet.interface }}"
#          out_interface: "{{ wireless.interface }}"
#          ctstate: ESTABLISHED,RELATED
#          jump: ACCEPT
#
#- name: Add iptables rule to forward traffic from wireless to ethernet interface
#  ansible.builtin.iptables:
#          chain: FORWARD
#          in_interface: "{{ wireless.interface }}"
#          out_interface: "{{ ethernet.interface }}"
#          jump: ACCEPT
#
#- name: Save iptables rules
#  ansible.builtin.shell: "iptables-save > /etc/iptables.ipv4.nat"
#
#- name: Load iptables rules at startup
#  ansible.builtin.lineinfile:
#          dest: /etc/rc.local
#          insertbefore: "^exit 0"
#          line: "iptables-restore < /etc/iptables.ipv4.nat"

- name: Restart dhcpcd service
  ansible.builtin.service:
          name: dhcpcd
          state: restarted 

- name: Restart dnsmasq service
  ansible.builtin.service:
          name: dnsmasq
          state: restarted

- name: Reboot
  ansible.builtin.reboot:
          reboot_timeout: 300
          reboot_msg: "Rebooting the system"
          post_reboot_delay: 30
